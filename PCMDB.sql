CREATE DATABASE pesu_club_management;

USE pesu_club_management;

CREATE TABLE FACULTY_COORDINATOR(
F_ID CHAR(10) NOT NULL,
F_FNAME VARCHAR(25) NOT NULL,
F_LNAME VARCHAR(25) NOT NULL,
F_DEPT ENUM('ARCH','BT','CV','CS','CA','DES','EE','EC','LAW','ME','MA','SH','COM','NUR','PHARMA','CIE'),
F_PHNO CHAR(10) NOT NULL UNIQUE,
F_EMAIL VARCHAR(60) NOT NULL UNIQUE,
F_PASSWORD VARCHAR(25) NOT NULL UNIQUE,
PRIMARY KEY(F_ID));

ALTER TABLE FACULTY_COORDINATOR ADD CONSTRAINT CHK_MAIL CHECK(F_EMAIL LIKE '%@pes.edu');

CREATE TABLE CLUB(
C_ID CHAR(10) NOT NULL,
C_NAME VARCHAR(25) NOT NULL UNIQUE,
C_DESC VARCHAR(500),
C_SDATE DATE,
C_EMAIL VARCHAR(60),
C_LINK VARCHAR(100),
C_LOGO BLOB NOT NULL,
F_ID CHAR(10),
PRIMARY KEY(C_ID),
FOREIGN KEY(F_ID) REFERENCES FACULTY_COORDINATOR(F_ID) ON DELETE CASCADE ON UPDATE CASCADE);

ALTER TABLE CLUB ADD CONSTRAINT CLUB_CHK_MAIL CHECK(C_EMAIL LIKE '%@pes.edu');


CREATE TABLE CLUB_CATEGORY(
C_ID CHAR(10) NOT NULL,
C_CATEGORY VARCHAR(20) NOT NULL,
PRIMARY KEY(C_ID,C_CATEGORY),
FOREIGN KEY(C_ID) REFERENCES CLUB(C_ID) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE CLUB_SM(
C_ID CHAR(10),
C_SM_NAME VARCHAR(12),
C_SM_LINK VARCHAR(70),
PRIMARY KEY (C_ID,C_SM_LINK),
FOREIGN KEY(C_ID) REFERENCES CLUB(C_ID) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE DOMAIN(
D_NAME VARCHAR(20) NOT NULL,
C_ID CHAR(10) NOT NULL,
D_DESC VARCHAR (100) NOT NULL,
D_CATEGORY VARCHAR(15),
PRIMARY KEY(D_NAME,C_ID),
FOREIGN KEY(C_ID) REFERENCES CLUB(C_ID) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE MEMBER_STUDENTS(
S_SRN CHAR(13) NOT NULL,
D_NAME VARCHAR(20) NOT NULL,
C_ID CHAR(10) NOT NULL,
S_FNAME VARCHAR(25) NOT NULL,
S_LNAME VARCHAR(25) NOT NULL,
S_EMAIL VARCHAR(60) NOT NULL,
S_SDATE DATE,
S_DEPT ENUM('ARCH','BT','CV','CS','CA','DES','EE','EC','LAW','ME','MA','SH','COM','NUR','PHARMA'),
S_PHNO CHAR(10) NOT NULL,
S_SEM ENUM('1','2','3','4','5','6','7','8'),
S_ROLE ENUM('CLUB HEAD','DOMAIN HEAD','MEMBER') NOT NULL,
S_PASSWORD VARCHAR(25) NOT NULL,
PRIMARY KEY(S_SRN,D_NAME,C_ID),
FOREIGN KEY(D_NAME) REFERENCES DOMAIN(D_NAME) ON UPDATE CASCADE,
FOREIGN KEY(C_ID) REFERENCES CLUB(C_ID) ON DELETE CASCADE ON UPDATE CASCADE);

ALTER TABLE MEMBER_STUDENTS ADD CONSTRAINT STU_CHK_MAIL CHECK(S_EMAIL LIKE '%@gmail.com');

CREATE TABLE HAS(
C_ID CHAR(10),
D_NAME VARCHAR(20),
PRIMARY KEY(C_ID,D_NAME),
FOREIGN KEY(D_NAME) REFERENCES DOMAIN(D_NAME) ON UPDATE CASCADE,
FOREIGN KEY(C_ID) REFERENCES CLUB(C_ID) ON UPDATE CASCADE ON DELETE CASCADE);

CREATE TABLE EVENT(
E_ID VARCHAR(10) NOT NULL,
E_NAME VARCHAR(20) NOT NULL UNIQUE,
E_DESC VARCHAR(500) NOT NULL,
E_DATE DATE NOT NULL,
E_STIME TIME NOT NULL,
E_ETIME TIME NOT NULL,
E_POSTER BLOB,
E_LOC VARCHAR(20) NOT NULL,
E_BUDGET DECIMAL(10,2),
PRIMARY KEY(E_ID));

CREATE TABLE EVENT_LINK(
E_ID VARCHAR(10),
E_LINK VARCHAR(60),
PRIMARY KEY(E_ID,E_LINK),
FOREIGN KEY(E_ID) REFERENCES EVENT(E_ID) ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE EVENT_CATEGORY(
E_ID VARCHAR(10),
E_CATEGORY VARCHAR(20),
PRIMARY KEY(E_ID,E_CATEGORY),
FOREIGN KEY(E_ID) REFERENCES EVENT(E_ID) ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE GUEST(
E_ID VARCHAR(10) NOT NULL,
G_FNAME VARCHAR(25) NOT NULL,
G_LNAME VARCHAR(25) NOT NULL,
G_ADD VARCHAR(50),
G_INFO VARCHAR(100),
G_EMAIL VARCHAR(60),
G_PHNO CHAR(10) NOT NULL,
PRIMARY KEY(E_ID,G_FNAME,G_LNAME),
FOREIGN KEY(E_ID) REFERENCES EVENT(E_ID) ON DELETE CASCADE ON UPDATE CASCADE);	

ALTER TABLE GUEST ADD CONSTRAINT GUEST_CHK_MAIL CHECK(G_EMAIL LIKE '%@gmail.com');

CREATE TABLE ORGANISES(
E_ID VARCHAR(10),
C_ID CHAR(10),
PRIMARY KEY(C_ID,E_ID),
FOREIGN KEY(C_ID) REFERENCES CLUB(C_ID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(E_ID) REFERENCES EVENT(E_ID) ON DELETE CASCADE ON UPDATE CASCADE);

DELIMITER //

CREATE FUNCTION GetNumberOfClubs(faculty_id CHAR(10)) RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE club_count INT;

    SELECT COUNT(*) INTO club_count
    FROM CLUB
    WHERE F_ID = faculty_id;

    RETURN club_count;
END //

DELIMITER ;


DELIMITER //

CREATE TRIGGER before_insert_event
BEFORE INSERT ON EVENT
FOR EACH ROW
BEGIN
    DECLARE max_id INT;

    -- Get the maximum numeric part of the existing event IDs
    SELECT MAX(CAST(SUBSTRING(E_ID, 8) AS UNSIGNED)) INTO max_id FROM EVENT;

    -- If there are no existing events, set max_id to 0
    IF max_id IS NULL THEN
        SET max_id := 0;
    END IF;

    -- Increment the numeric part and construct the new event ID
    SET NEW.E_ID := CONCAT('PESRREV', LPAD(max_id + 1, 3, '0'));
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE CountClubsForStudent(IN in_student_id VARCHAR(13), OUT out_club_count INT)
BEGIN
    SELECT COUNT(*) INTO out_club_count
    FROM MEMBER_STUDENTS 
    JOIN 
    CLUB ON CLUB.C_ID=MEMBER_STUDENTS.C_ID
    WHERE S_SRN = in_student_id;
END //

DELIMITER ;

CREATE TABLE BACKUP_TABLE (
    S_SRN CHAR(13) NOT NULL,
    D_NAME VARCHAR(20) NOT NULL,
    C_ID CHAR(10) NOT NULL,
    S_FNAME VARCHAR(25) NOT NULL,
    S_LNAME VARCHAR(25) NOT NULL,
    S_EMAIL VARCHAR(60) NOT NULL,
    S_SDATE DATE,
    S_EDATE DATE,
    S_DEPT ENUM('ARCH','BT','CV','CS','CA','DES','EE','EC','LAW','ME','MA','SH','COM','NUR','PHARMA'),
    S_PHNO CHAR(10) NOT NULL,
    S_SEM ENUM('1','2','3','4','5','6','7','8'),
    S_ROLE VARCHAR(20) NOT NULL,
    PRIMARY KEY(S_SRN,D_NAME,C_ID),
    FOREIGN KEY(D_NAME) REFERENCES DOMAIN(D_NAME) ON UPDATE CASCADE,
    FOREIGN KEY(C_ID) REFERENCES CLUB(C_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


 
DELIMITER //
CREATE TRIGGER after_delete_student
AFTER DELETE
ON member_students FOR EACH ROW
BEGIN
    INSERT INTO backup_table (S_SRN, D_NAME, C_ID, S_FNAME, S_LNAME, S_SEM, S_EMAIL,S_DEPT, S_PHNO, S_SDATE, S_EDATE, S_ROLE)
    VALUES (OLD.S_SRN, OLD.D_NAME, OLD.C_ID, OLD.S_FNAME, OLD.S_LNAME, OLD.S_SEM, OLD.S_EMAIL,OLD.S_DEPT,OLD.S_PHNO, OLD.S_SDATE, CURDATE(), OLD.S_ROLE);
END;
//
DELIMITER ;









 















